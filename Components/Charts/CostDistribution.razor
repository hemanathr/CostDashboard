@using CostDashboard.Models
@using CostDashboard.Services
@inject CostDataService DataService

<div class="chart-card">
    <div class="chart-header">
        <h3>Cost Distribution</h3>
    </div>
    
    <div class="chart-content">
        <TelerikChart>
            <ChartSeriesItems>
                <ChartPieSeries Data="@costData"
                               Field="@nameof(ChartDataItem.Value)"
                               CategoryField="@nameof(ChartDataItem.Category)"
                               Explode="true"
                               ExplodeField="@nameof(ChartDataItem.Exploded)">
                </ChartPieSeries>
            </ChartSeriesItems>
            
            <ChartTitle Text="Cost Distribution by Service"></ChartTitle>
            
            <ChartLegend Position="ChartLegendPosition.Right">
            </ChartLegend>
            
            <ChartTooltip Visible="true">
                <Template>
                    @context.Category: $@String.Format("{0:n2}", context.Value)
                </Template>
            </ChartTooltip>
        </TelerikChart>
    </div>
</div>

@code {
    [Parameter]
    public Filters Filters { get; set; } = new();
    
    [Parameter]
    public DateRange DateRange { get; set; } = new();
    
    private List<ChartDataItem> costData = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        // In a real app, this would filter based on the filters and date range
        var rawData = await DataService.GetCostDistributionData(Filters, DateRange);
        
        costData = rawData.Select((item, index) => new ChartDataItem
        {
            Category = item.Key,
            Value = item.Value,
            Exploded = index == 0 // Explode the largest segment
        }).ToList();
    }
    
    public class ChartDataItem
    {
        public string Category { get; set; } = string.Empty;
        public decimal Value { get; set; }
        public bool Exploded { get; set; }
    }
}