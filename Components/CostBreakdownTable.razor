@using CostDashboard.Models
@using CostDashboard.Services
@inject CostDataService DataService

<div class="table-card">
    <div class="table-header">
        <h3>Cost Breakdown</h3>
    </div>
    
    <div class="table-content">
        <TelerikGrid Data="@costBreakdown"
                    Pageable="true"
                    Sortable="true"
                    FilterMode="GridFilterMode.FilterRow"
                    Resizable="true"
                    PageSize="10">
            <GridColumns>
                <GridColumn Field="@nameof(CostBreakdownItem.Service)" Title="Service" Width="180px" />
                <GridColumn Field="@nameof(CostBreakdownItem.Region)" Title="Region" Width="150px" />
                <GridColumn Field="@nameof(CostBreakdownItem.Account)" Title="Account" Width="150px" />
                <GridColumn Field="@nameof(CostBreakdownItem.Cost)" Title="Cost" Width="120px">
                    <Template>
                        $@(((CostBreakdownItem)context).Cost.ToString("N2"))
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(CostBreakdownItem.Change)" Title="Change %" Width="120px">
                    <Template>
                        @{
                            var item = (CostBreakdownItem)context;
                            var changeClass = item.Change > 0 ? "text-danger" : "text-success";
                            var changePrefix = item.Change > 0 ? "+" : "";
                        }
                        <span class="@changeClass">@changePrefix@(item.Change.ToString("N2"))%</span>
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(CostBreakdownItem.Status)" Title="Status" Width="120px">
                    <Template>
                        @{
                            var item = (CostBreakdownItem)context;
                            var statusClass = item.Status == "Increase" ? "status-increase" : "status-decrease";
                        }
                        <span class="@statusClass">@item.Status</span>
                    </Template>
                </GridColumn>
            </GridColumns>
        </TelerikGrid>
    </div>
</div>

@code {
    [Parameter]
    public Filters Filters { get; set; } = new();
    
    [Parameter]
    public DateRange DateRange { get; set; } = new();
    
    private List<CostBreakdownItem> costBreakdown = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        // In a real app, this would filter based on the filters and date range
        costBreakdown = await DataService.GetCostBreakdownData(Filters, DateRange);
    }
}